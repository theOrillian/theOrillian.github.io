<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on theOrillian</title>
    <link>https://orillian.com/post/index.xml</link>
    <description>Recent content in Posts on theOrillian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>greg@orillian.com (Greg Graham)</managingEditor>
    <webMaster>greg@orillian.com (Greg Graham)</webMaster>
    <copyright>(c) 2017 Greg Graham, theOrillian.</copyright>
    <lastBuildDate>Thu, 02 Mar 2017 07:50:58 -0500</lastBuildDate>
    <atom:link href="https://orillian.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL can be beautiful, but it takes effort</title>
      <link>https://orillian.com/2017/03/02/sql-can-be-beautiful-but-it-takes-effort/</link>
      <pubDate>Thu, 02 Mar 2017 07:50:58 -0500</pubDate>
      <author>greg@orillian.com (Greg Graham)</author>
      <guid>https://orillian.com/2017/03/02/sql-can-be-beautiful-but-it-takes-effort/</guid>
      <description>&lt;p&gt;Code reviews are necessary part of maintaining a sane work environment. New developers can learn from seasoned ones, seasoned developers will be less likely to get loose with their promotions.&lt;/p&gt;

&lt;p&gt;When your SQL code is all over like a dog&amp;rsquo;s breakfast, you can expect unexpected results. Continue reading for an example of a recent code uplift.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;For more information about conducting a proper code review, refer to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.fogcreek.com/increase-defect-detection-with-our-code-review-checklist-example/&#34; target=&#34;_blank&#34;&gt;Code review checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kevinlondon.com/2015/05/05/code-review-best-practices.html&#34; target=&#34;_blank&#34;&gt;Code review best practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;original&#34;&gt;Original&amp;hellip;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;CREATE Procedure [dbo].[sp_MTShipDesk_MCHQStatus3] as

Begin
  declare @tmpMCCustOrderNo varchar(10), @tmpCompareOrderno varchar(10), @tmpMCPackageID varchar(21), @tmpCurrentMC int
  declare @tmp1 TABlE(OrderNo varchar(10), MCTotCnt int)
  declare @tmp2 TABLE(Orderno varchar(10),PackageID varchar(21), MCBoxX int)

  --First get the Total Count of MC packages on this Order
  Insert into @tmp1(OrderNo, MCTotCnt)
    SELECT s.CustOrderNo, count(Distinct s.PackageID)
  From     MTPacking..SDST s
    Inner Join LaneMstr..MixedCaseHoldingQueue MCHQ on
      MCHQ.PackageID = s.PackageID
  Group By s.CustOrderNo

  Insert into @tmp2(OrderNo,PackageID,MCBoxX)
  Select CustorderNO, PackageID, ROW_NUMBER() Over (Partition by CustOrderNo Order by packageid) as rn
  FROM
  (      
      Select distinct s.CustOrderNo, s.PackageID  
      From MTPacking..SDST s
      Inner Join @tmp1 l
        on s.CustOrderNo = l.OrderNo and IsNull(s.BoxType, &#39;&#39;) &amp;lt;&amp;gt; &#39;&#39;
  ) as DATA

  declare  @tmp3 table(SalesID varchar(20), Shipper Varchar(50), PackageID Varchar(21), ShipToName Varchar(100), UCC128 Varchar(50), Priority int, status varchar(20),
    LastUpdate datetime, shipdate datetime, pallets int, packages int, mcboxY int)

  Insert into @tmp3 (SalesID, Shipper, PackageID, ShipToName, UCC128, Priority, status, LastUpdate, shipdate, pallets, packages, mcboxY)
  Select Distinct i.ax_salesid as SalesID, i.ShipMethod,  m.PackageID, i.ShipToName, m.UCC128, m.Priority Priority, m.MCHQStatus Status, m.LastUpdate, i.ShipDate ShipDate,  
    COUNT(Distinct s.ucc128) Pallets, COUNT(Distinct S.packageid) Packages, T2.MCTotCnt MCBoxY  
  From LaneMstr..MixedCaseHoldingQueue m  
    Inner Join MTPacking..InProcessOrders i  on LEFT (m.packageid, 6) = i.CustOrderNo  
    Inner Join MTPacking..SDST s on S.CustOrderNo = I.CustOrderNo  
    Left Join @tmp1 T2 on T2.OrderNo = S.CustOrderNo    
  Group by i.ax_salesid , i.ShipMethod, m.PackageID, i.ShipToName, m.UCC128, m.Priority, m.MCHQStatus, m.LastUpdate, i.ShipDate , T2.MCTotCnt
  Order by m.Priority, i.AX_SalesID, m.PackageID

  Select MCR.SalesID, MCR.Shipper, MCR.PackageID, MCR.ShipToName,
    MCR.UCC128,
    MCR.Priority, MCR.Status, MCR.LastUpdate, MCR.ShipDate, MCR.Pallets, MCR.Packages, MCM.MCBoxX as BoxX, MCR.mcboxY as OfY
  From @tmp3 MCR
  Inner Join @tmp2 MCM on
    MCM.PackageID = MCR.PackageID
  Order by MCR.Priority, MCR.SalesID, MCM.MCBoxX, MCR.mcboxY  
END  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;after-review&#34;&gt;After review&amp;hellip;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;CREATE Procedure [dbo].[sp_MTShipDesk_MCHQStatus3] as

; with
enumerateBoxesInHoldingQueue as (
select s.CustOrderNo
      ,hq.PackageId
      ,ROW_NUMBER() over (partition by s.CustOrderNo
                          order by hq.packageid) as boxNum
  from MTPacking..SDST s
         inner join
       LaneMstr..MixedCaseHoldingQueue hq
         on hq.PackageID = s.PackageID
    where s.BoxType &amp;lt;&amp;gt; &#39;&#39;
      and s.BoxType is not null
    group by s.CustOrderNo
            ,hq.PackageId
)

,boxCountInHoldingQueue as (
select ep2.CustOrderNo
      ,max(ep2.boxNum) as totalBoxes
  from enumerateBoxesInHoldingQueue ep2
 group by ep2.CustOrderNo
)

,orderTotalPalletAndPackageCounts as (
select CustOrderNo
      ,count(distinct s.ucc128) Pallets
      ,count(distinct S.packageid) Packages
  from MTPacking..SDST s
 group by CustOrderNo
)

,mixedCaseHoldingQueueDetails as (
select i.ax_salesid as SalesID
      ,i.ShipMethod
      ,m.PackageID
      ,i.ShipToName
      ,m.UCC128
      ,m.Priority
      ,m.MCHQStatus as Status
      ,m.LastUpdate
      ,i.ShipDate
  from LaneMstr..MixedCaseHoldingQueue m
         inner join
       MTPacking..InProcessOrders i  
         on LEFT (m.packageid, 6) = i.CustOrderNo
)

select hq.*
      ,pap.Pallets
      ,pap.Packages
      ,eb.boxNum
      ,bc.totalBoxes
  from mixedCaseHoldingQueueDetails hq
         inner join
       enumerateBoxesInHoldingQueue eb
         on eb.PackageID = hq.PackageID
         inner join
       boxCountInHoldingQueue bc
         on bc.CustOrderNo = eb.CustOrderNo
         inner join
       orderTotalPalletAndPackageCounts pap
         on pap.CustOrderNo = eb.CustOrderNo
 order by hq.Priority
         ,hq.SalesID
         ,eb.boxNum
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;changes-made&#34;&gt;Changes made&amp;hellip;&lt;/h2&gt;

&lt;h3 id=&#34;remove-unused-variables&#34;&gt;Remove unused variables&lt;/h3&gt;

&lt;p&gt;&amp;lsquo;nuf said&lt;/p&gt;

&lt;h3 id=&#34;rename-temporary-tables&#34;&gt;Rename temporary tables&lt;/h3&gt;

&lt;p&gt;Temporary tables are variables in SQL. They need to have descriptive names.&lt;/p&gt;

&lt;p&gt;There is a clever piece of code in the original that counts the packages in the holding queue, however when the temporary table is named &lt;code&gt;@tmp2&lt;/code&gt; and the column name is &lt;code&gt;rn&lt;/code&gt; it is virtually impossible to figure out what that code does.&lt;/p&gt;

&lt;p&gt;Compare that to the same code used in the CTE named &lt;code&gt;enumerateBoxesInHoldingQueue&lt;/code&gt; and column named &lt;code&gt;boxNum&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;try-simplifying-using-the-with-query-syntax&#34;&gt;Try simplifying using the &lt;code&gt;;with&lt;/code&gt; query syntax&lt;/h3&gt;

&lt;p&gt;I remember when writing SQL queries using the ANSI syntax seemed awkward. These days it seems so natural to separate join syntax from filter syntax. I cannot imagine going back.&lt;/p&gt;

&lt;p&gt;Writing code using the &lt;code&gt;;with&lt;/code&gt; CTE syntax will be the new standard. Temporary tables will be required far less often. Good SQL code can still be written using temporary table, but I find the CTE syntax more expressive and I encourage everyone to give it a try.&lt;/p&gt;

&lt;h3 id=&#34;comments-might-not-be-necessary&#34;&gt;Comments might not be necessary&lt;/h3&gt;

&lt;p&gt;Every major function or procedure should have a comment that converts the intent of the code into plain language. However, inside the code module,
the best code is self-documenting. That should be the goal. Let it be understood that sometimes, you need a comment or two, but when CTEs are named like &lt;code&gt;enumerateBoxesInHoldingQueue&lt;/code&gt; and &lt;code&gt;orderTotalPalletAndPackageCounts&lt;/code&gt;. Code that requires a lot of comment is likely a &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34;&gt;code smell&lt;/a&gt; that indicates something else is wrong.&lt;/p&gt;

&lt;h3 id=&#34;code-format-is-important&#34;&gt;Code format is important&lt;/h3&gt;

&lt;p&gt;Personally I like the new format. I&amp;rsquo;m not looking for perfection. I don&amp;rsquo;t believe that one format fits all. But I do believe that the proposed format is more readable then the original.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One note of caution here&amp;hellip;&lt;/strong&gt; looking for the perfect format will destroy the intent here, which is to make the code easier to grok and to encourage developers to write the best code they can.&lt;/p&gt;

&lt;h3 id=&#34;the-query-engine-was-written-by-humans&#34;&gt;The query engine was written by humans&lt;/h3&gt;

&lt;p&gt;Keep in mind that the query engine was written by humans. It is really good at figuring out what our intentions are, however, if a human cannot understand the code, then how is the query engine suppose to return the desired results!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting started with Hugo static website generator</title>
      <link>https://orillian.com/2017/02/25/getting-started-with-hugo-static-website-generator/</link>
      <pubDate>Sat, 25 Feb 2017 07:04:29 -0500</pubDate>
      <author>greg@orillian.com (Greg Graham)</author>
      <guid>https://orillian.com/2017/02/25/getting-started-with-hugo-static-website-generator/</guid>
      <description>&lt;p&gt;I do not recommend using the information in this blog post as your template for generating a Hugo static website. The post serves me as content I can use to understand how Hugo works. While Googling for answers to setup and configuration questions, I noticed a wide variety of possible solutions. Sometimes this lead to more confusion. In the end, the number one most important thing &lt;em&gt;for me&lt;/em&gt; was to create a ./deploy.sh script that codifies the deploy process. Then, move on to creating content&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;day-1-stand-up-the-development-environment&#34;&gt;Day 1 - Stand up the development environment&lt;/h1&gt;

&lt;p&gt;Use the &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34; target=&#34;_blank&#34;&gt;Hugo Quickstart Guide&lt;/a&gt; to get rolling. Here you&amp;rsquo;ll find a reference to the &lt;a href=&#34;https://gohugo.io/overview/installing/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use GitHub&amp;rsquo;s &lt;a href=&#34;https://guides.github.com/features/mastering-markdown&#34; target=&#34;_blank&#34;&gt;Mastering Markdown&lt;/a&gt; to get started with adding some format to your blog post. Hugo uses &lt;a href=&#34;https://github.com/russross/blackfriday&#34; target=&#34;_blank&#34;&gt;Blackfriday&lt;/a&gt; markdown engine which has a few additional features.&lt;/p&gt;

&lt;p&gt;Markdown does not support opening links to a new browser tab. To have links open in new tabs, you need to write the HTML yourself - &lt;code&gt;&amp;lt;a href=&amp;quot;https://orillian.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;orillian.com&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This site uses &lt;a href=&#34;https://github.com/enten/hyde-y&#34; target=&#34;_blank&#34;&gt;Hyde-Y&lt;/a&gt; theme. If you plan on using this theme, you need to edit the &lt;strong&gt;config.toml&lt;/strong&gt;, &lt;strong&gt;data/Menu.toml&lt;/strong&gt; &amp;amp; &lt;strong&gt;data/FootMenu.toml&lt;/strong&gt; as shown in the theme configuration instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/content/summaries/&#34; target=&#34;_blank&#34;&gt;Blog summaries&lt;/a&gt; can be controlled by using &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt;. Leave the post metadata for the description field blank.&lt;/p&gt;

&lt;p&gt;Start to finish, the initial developer version stand-up of this site using Hugo took about 2 hours. No knowledge of Go or Javascript or CSS was required.&lt;/p&gt;

&lt;h1 id=&#34;day-2-publish-the-website&#34;&gt;Day 2 - Publish the website&lt;/h1&gt;

&lt;p&gt;Today I messed up. As a seasoned IT pro and I still mess up sometimes. I was worrying about taxonomies and creating a &amp;laquo;blog series&amp;raquo; instead of just accomplishing my goal - use Hugo to generate the &lt;a href=&#34;https://orillian.com&#34; target=&#34;_blank&#34;&gt;orillian.com&lt;/a&gt; website!&lt;/p&gt;

&lt;p&gt;I wasted several hours and did not accomplish my goal. I&amp;rsquo;ll try again tomorrow.&lt;/p&gt;

&lt;p&gt;The goal of this site is to document my career based experiences and learnings. Most of the blog postings will be technical in nature, some may be administrative.&lt;/p&gt;

&lt;h1 id=&#34;day-3-part-1-publish-the-website&#34;&gt;Day 3 - Part #1: Publish the website&lt;/h1&gt;

&lt;p&gt;I chose to publish to GitHub Pages, but if I was doing it again, I&amp;rsquo;d choose to push to Google&amp;rsquo;s Firebase. That would eliminate the Cloudflare setup and provide the additional benefits listed in the blog post &lt;a href=&#34;https://www.leowkahman.com/2016/07/14/static-blog-generated-by-hugo-hosted-on-google-firebase/&#34; target=&#34;_blank&#34;&gt;Static blog generated by Hugo, hosted on Google Firebase&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Choosing a hosting provider&lt;/p&gt;

&lt;p&gt;I narrowed down my options to two; GitHub Pages and Google Firebase. Both
support use of custom domain name. I chose Firebase because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Valid SSL is provided for custom domain free of charge.&lt;/li&gt;
&lt;li&gt;Hosted content is propagated all over the world via Google’s super fast CDN.&lt;/li&gt;
&lt;li&gt;HTTP Cache-Control header can be customized by file name pattern; i.e.
images are cached for 1 year while HTML content can be given a short expiry.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;deploying-to-github-pages&#34;&gt;Deploying to GitHub Pages&lt;/h3&gt;

&lt;p&gt;Follow the step-by-step instructions on &lt;a href=&#34;http://whipperstacker.com/2015/11/27/deploying-a-stand-alone-hugo-site-to-github-pages-mapped-to-a-custom-domain/&#34; target=&#34;_blank&#34;&gt;Deploying a Stand-Alone Hugo Site to GitHub Pages Mapped to a Custom Domain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A couple of things that slowed down my progress were:
* the repository that needed to be created was &lt;code&gt;&amp;lt;userName&amp;gt;.github.io&lt;/code&gt;, not &lt;code&gt;github.io&lt;/code&gt; in theOrillian user GitHub account.
* the &lt;code&gt;config.toml&lt;/code&gt; needed to be altered, setting &lt;code&gt;baseurl = &amp;quot;http://theOrillian.github.io/&amp;quot;&lt;/code&gt; &lt;strong&gt;&lt;em&gt;Don&amp;rsquo;t forget the final &amp;lsquo;/&amp;rsquo;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I pinched and updated a deploy script from GitHub user @sgylon:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

# Build the project.
echo -e &amp;quot;\033[0;32mUsing Hugo to generate static website...\033[0m&amp;quot;
rm -rf public/*
hugo

echo -e &amp;quot;\033[0;32mPushing website source to GitHub...\033[0m&amp;quot;

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;Rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
      then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source repos.
git push origin master

# Push the build repos.
echo -e &amp;quot;\033[0;32mDeploying website to GitHub...\033[0m&amp;quot;

#cd public &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m &amp;quot;$msg&amp;quot; &amp;amp;&amp;amp; git push origin master &amp;amp;&amp;amp; cd ..
cd public
git add --all
git commit -m &amp;quot;$msg&amp;quot;
git push origin master
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;day-3-part-2-set-a-custom-domain-for-site&#34;&gt;Day 3 - Part #2: Set a custom domain for site&lt;/h1&gt;

&lt;p&gt;For step-by-step instructions on setting up a custom domain for your site, while using Google Domains, check out &lt;a href=&#34;http://www.curtismlarson.com/blog/2015/04/12/github-pages-google-domains/&#34; target=&#34;_blank&#34;&gt;GitHub Pages using Google Domains&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Your Google Domain can be administrated from &lt;code&gt;domains.google.com&lt;/code&gt;. It took about an hour for the DNS records to propagate. The site says it may take up to 24hours. Grab dinner, walk the dog or get some sleep.&lt;/p&gt;

&lt;p&gt;I wanted to delete the entire public folder before generating and committing the new website. But there were 2 files that I wanted to preserve CNAME and the README.md in the GitHub repository. These files needed to be copied to the Hugo static folder and committed to the Hugo website source.&lt;/p&gt;

&lt;h1 id=&#34;day-3-part-3-serve-custom-domain-with-https&#34;&gt;Day 3 - Part #3: Serve custom domain with https&lt;/h1&gt;

&lt;p&gt;The article I used to configure https for my GitHub Pages is &lt;a href=&#34;https://www.goyllo.com/github/pages/free-cloudflare-ssl-for-custom-domain/&#34; target=&#34;_blank&#34;&gt;How To Add Free Cloudflare SSL in Github Pages with Custom Domain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was almost too easy to set up Cloudflare. Create a free account, then let it discover your current configuration, finally change the DNS server for your domain. Again, the site says it may take up to 24hours. Grab dinner, walk the dog or get some sleep.&lt;/p&gt;

&lt;h1 id=&#34;day-3-part-4-creating-content&#34;&gt;Day 3 - Part #4: Creating content&lt;/h1&gt;

&lt;p&gt;The whole purpose of publishing a static website is to share content. So, while there are many things I&amp;rsquo;d like to change, it&amp;rsquo;s time to create content!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>